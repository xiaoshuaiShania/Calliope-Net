{"version":3,"sources":["pages/Homepage/Content/ContentView.js"],"names":["ContentView","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_this$props","this","props","intl","initDone","SloganView","React","createElement","style","height","className","get","position","width","BelowPannel","HowtoConvert","_Layout","marginTop","backgroundColor","children","_Divider","margin","Component"],"mappings":"4RAIqBA,G,OAAW,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,OAAAK,YAAA,KAAAL,GAAAG,EAAAG,MAAA,KAAAC,WAkF3B,OAlF2BC,YAAAR,EAAA,EAAAS,IAAA,SAAAC,MAE5B,WACI,IAAAC,EAA2BC,KAAKC,MAAxBC,EAAIH,EAAJG,KAAMC,EAAQJ,EAARI,SAERC,EAAa,WACf,OACIC,IAAAC,cAAA,WACID,IAAAC,cAAA,OAAKC,MAAO,CAAEC,OAAQ,SAAWC,UAAU,UACvCJ,IAAAC,cAAA,YAAQH,GAAYD,EAAKQ,IAAI,uBAGjCL,IAAAC,cAAA,OAAKC,MAAO,CAAEI,SAAU,WAAYC,MAAO,OAAQJ,OAAQ,QACvDH,IAAAC,cAAA,OAAKG,UAAU,oBACfJ,IAAAC,cAAA,OAAKG,UAAU,qBAMzBI,EAAc,WAChB,OACIR,IAAAC,cAAA,OAAKG,UAAU,eACXJ,IAAAC,cAAA,OAAKG,UAAU,aACXJ,IAAAC,cAAA,OAAKG,UAAU,mBACfJ,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,MAC5BL,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,QAEhCL,IAAAC,cAAA,OAAKG,UAAU,aACXJ,IAAAC,cAAA,OAAKG,UAAU,mBACfJ,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,MAC5BL,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,QAEhCL,IAAAC,cAAA,OAAKG,UAAU,aACXJ,IAAAC,cAAA,OAAKG,UAAU,mBACfJ,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,MAC5BL,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,QAEhCL,IAAAC,cAAA,OAAKG,UAAU,aACXJ,IAAAC,cAAA,OAAKG,UAAU,mBACfJ,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,MAC5BL,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,QAEhCL,IAAAC,cAAA,OAAKG,UAAU,aACXJ,IAAAC,cAAA,OAAKG,UAAU,mBACfJ,IAAAC,cAAA,YAAQH,GAAYD,EAAKQ,IAAI,MAC7BL,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,QAEhCL,IAAAC,cAAA,OAAKG,UAAU,aACXJ,IAAAC,cAAA,OAAKG,UAAU,mBACfJ,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,MAC5BL,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,UAKtCI,EAAe,WACjB,OACIT,IAAAC,cAAA,OAAKG,UAAU,gBACXJ,IAAAC,cAAA,YACAD,IAAAC,cAAA,WACID,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,iBAC5BL,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,UAC5BL,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,UAC5BL,IAAAC,cAAA,YAAOH,GAAYD,EAAKQ,IAAI,aAK5C,OACIL,IAAAC,cAAA,OAAKG,UAAU,eACXJ,IAAAC,cAACF,EAAU,MACXC,IAAAC,cAAAS,IAAA,CAAQR,MAAO,CAAES,UAAW,OAAQJ,MAAO,OAAQK,gBAAiB,UAE5DjB,KAAKC,MAAMiB,SAEfb,IAAAC,cAACO,EAAgBb,KAAKC,OACtBI,IAAAC,cAAAa,IAAA,CAASZ,MAAO,CAAEU,gBAAiB,UAAWG,OAAQ,SACtDf,IAAAC,cAACQ,EAAiBd,KAAKC,aAItCb,EAlF2B,CAASiB,IAAMgB","file":"static/js/15.89c0dbc6.chunk.js","sourcesContent":["import React from 'react';\nimport { Layout, Divider } from 'antd';\nimport \"./ContentView.less\";\n\nexport default class ContentView extends React.Component {\n\n    render() {\n        const { intl, initDone } = this.props;\n\n        const SloganView = () => {\n            return (\n                <div>\n                    <div style={{ height: \"148px\" }} className='slogan'>\n                        <span >{initDone && intl.get(\"calliope-lite-net\")}</span>\n                        {/* <span>{initDone && intl.get(\"slogan\")}</span> */}\n                    </div>\n                    <div style={{ position: 'relative', width: '100%', height: '1px' }}>\n                        <div className='decorationImage'></div>\n                        <div className='customDivider' ></div>\n                    </div>\n                </div>\n            )\n        };\n\n        const BelowPannel = () => {\n            return (\n                <div className='belowPannel'>\n                    <div className=\"cloumnDiv\">\n                        <div className=\"icon5 iconSize\"></div>\n                        <span>{initDone && intl.get(\"5\")}</span>\n                        <span>{initDone && intl.get(\"51\")}</span>\n                    </div>\n                    <div className=\"cloumnDiv\">\n                        <div className=\"icon2 iconSize\"></div>\n                        <span>{initDone && intl.get(\"2\")}</span>\n                        <span>{initDone && intl.get(\"21\")}</span>\n                    </div>\n                    <div className=\"cloumnDiv\">\n                        <div className=\"icon3 iconSize\"></div>\n                        <span>{initDone && intl.get(\"3\")}</span>\n                        <span>{initDone && intl.get(\"31\")}</span>\n                    </div>\n                    <div className=\"cloumnDiv\" >\n                        <div className=\"icon4 iconSize\"></div>\n                        <span>{initDone && intl.get(\"4\")}</span>\n                        <span>{initDone && intl.get(\"41\")}</span>\n                    </div>\n                    <div className=\"cloumnDiv\">\n                        <div className=\"icon1 iconSize\"></div>\n                        <span >{initDone && intl.get(\"1\")}</span>\n                        <span>{initDone && intl.get(\"11\")}</span>\n                    </div>\n                    <div className=\"cloumnDiv\">\n                        <div className=\"icon6 iconSize\"></div>\n                        <span>{initDone && intl.get(\"6\")}</span>\n                        <span>{initDone && intl.get(\"61\")}</span>\n                    </div>\n                </div>\n            )\n        };\n        const HowtoConvert = () => {\n            return (\n                <div className=\"howtoConvert\">\n                    <div></div>\n                    <div >\n                        <span>{initDone && intl.get(\"Howtoconvert\")}</span>\n                        <span>{initDone && intl.get(\"step1\")}</span>\n                        <span>{initDone && intl.get(\"step2\")}</span>\n                        <span>{initDone && intl.get(\"step3\")}</span>\n                    </div>\n                </div>\n            )\n        };\n        return (\n            <div className='ContentView' >\n                <SloganView />\n                <Layout style={{ marginTop: \"23px\", width: \"100%\", backgroundColor: \"white\" }}>\n                    {\n                        this.props.children\n                    }\n                    <BelowPannel {...this.props} />\n                    <Divider style={{ backgroundColor: \"#979797\", margin: \"0px\" }} />\n                    <HowtoConvert {...this.props} />\n                </Layout>\n            </div>\n        )\n    }\n}"],"sourceRoot":""}